import os
import sqlite3
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.tl.types import ChannelParticipantsAdmins
import locale

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ (—É–±—Ä–∞–Ω–∞ –¥–ª—è Docker)
# locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient('birthday_bot', API_ID, API_HASH).start(bot_token=BOT_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('birthdays.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS birthdays (
    user_id INTEGER NOT NULL,
    chat_id INTEGER NOT NULL,
    username TEXT,
    first_name TEXT NOT NULL,
    last_name TEXT,
    date_of_birth TEXT NOT NULL,
    added_by_admin INTEGER DEFAULT 0,
    PRIMARY KEY (user_id, chat_id)
)
''')
conn.commit()

MONTHS_TRANSLATION = {
    'January': '—è–Ω–≤–∞—Ä—è', 'February': '—Ñ–µ–≤—Ä–∞–ª—è', 'March': '–º–∞—Ä—Ç–∞', 'April': '–∞–ø—Ä–µ–ª—è',
    'May': '–º–∞—è', 'June': '–∏—é–Ω—è', 'July': '–∏—é–ª—è', 'August': '–∞–≤–≥—É—Å—Ç–∞',
    'September': '—Å–µ–Ω—Ç—è–±—Ä—è', 'October': '–æ–∫—Ç—è–±—Ä—è', 'November': '–Ω–æ—è–±—Ä—è', 'December': '–¥–µ–∫–∞–±—Ä—è'
}

def format_date_russian(date):
    day = date.strftime("%d")
    month = date.strftime("%B")  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    return f"{day} {MONTHS_TRANSLATION[month]}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def is_admin(chat_id, user_id):
    admins = await client.get_participants(chat_id, filter=ChannelParticipantsAdmins)
    return any(admin.id == user_id for admin in admins)

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
async def delete_message_later(event, message):
    await asyncio.sleep(60)
    await client.delete_messages(event.chat_id, [event.message.id, message.id])

# –ö–æ–º–∞–Ω–¥–∞ /start
@client.on(events.NewMessage(pattern='/start'))
async def start(event):
    message = await event.respond("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è—Ö. üéä\n"
                                  "\n"
                                  "–í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                                  "‚Ä£ /user_add –î–î-–ú–ú-–ì–ì–ì–ì - –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n"
                                  "‚Ä£ /list - –≤—ã–≤–µ—Å—Ç–∏ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π\n"
                                  "\n"
                                  "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
                                  "‚Ä£ /admin_add @username –î–î-–ú–ú-–ì–ì–ì–ì - –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                                  "‚Ä£ /admin_delete @username - —É–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    asyncio.create_task(delete_message_later(event, message))

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@client.on(events.NewMessage(pattern='/user_add'))
async def add_birthday(event):
    args = event.message.text.split()
    if len(args) != 2:
        message = await event.respond("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_add –î–î-–ú–ú-–ì–ì–ì–ì")
        asyncio.create_task(delete_message_later(event, message))
        return
    
    date_str = args[1]
    try:
        date_of_birth = format_date_russian(datetime.strptime(date_str, "%d-%m-%Y"))
    except ValueError:
        message = await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì.")
        asyncio.create_task(delete_message_later(event, message))
        return
    
    cursor.execute('''INSERT OR REPLACE INTO birthdays (user_id, chat_id, username, first_name, last_name, date_of_birth, added_by_admin)
                      VALUES (?, ?, ?, ?, ?, ?, 0)''', (event.sender_id, event.chat_id, event.sender.username, event.sender.first_name, event.sender.last_name, date_of_birth))
    conn.commit()
    message = await event.respond(f"‚úÖ –í–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω: {date_of_birth}.")
    asyncio.create_task(delete_message_later(event, message))

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π
@client.on(events.NewMessage(pattern='/list'))
async def list_birthdays(event):
    cursor.execute('SELECT first_name, last_name, date_of_birth FROM birthdays WHERE chat_id = ? ORDER BY strftime("%m %d", date_of_birth)', (event.chat_id,))
    users = cursor.fetchall()
    
    if not users:
        message = await event.respond("–ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π. üò•")
    else:
        message = "üóìÔ∏è –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞:\n \n"
        for user in users:
            first_name, last_name, date_of_birth = user
            last_name_text = f" {last_name}" if last_name else ""
            message += f"{first_name}{last_name_text} - {date_of_birth}\n"
        message = await event.respond(message)
    
    asyncio.create_task(delete_message_later(event, message))

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@client.on(events.NewMessage(pattern='/admin_add'))
async def add_user_birthday(event):
    if not await is_admin(event.chat_id, event.sender_id):
        message = await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        asyncio.create_task(delete_message_later(event, message))
        return
    
    args = event.message.text.split()
    if len(args) != 3:
        message = await event.respond("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_add @username –î–î-–ú–ú-–ì–ì–ì–ì")
        asyncio.create_task(delete_message_later(event, message))
        return
    
    username, date_str = args[1], args[2]
    try:
        date_of_birth = format_date_russian(datetime.strptime(date_str, "%d-%m-%Y"))
    except ValueError:
        message = await event.respond("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì.")
        asyncio.create_task(delete_message_later(event, message))
        return
    
    user = await client.get_entity(username)
    cursor.execute('''INSERT OR REPLACE INTO birthdays (user_id, chat_id, username, first_name, last_name, date_of_birth, added_by_admin)
                      VALUES (?, ?, ?, ?, ?, ?, 1)''', (user.id, event.chat_id, username, user.first_name, user.last_name, date_of_birth))
    conn.commit()
    message = await event.respond(f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {user.first_name} –¥–æ–±–∞–≤–ª–µ–Ω: {date_of_birth}.")
    asyncio.create_task(delete_message_later(event, message))
    
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@client.on(events.NewMessage(pattern='/admin_delete'))
async def remove_user_birthday(event):
    if not await is_admin(event.chat_id, event.sender_id):
       message = await event.respond("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
       asyncio.create_task(delete_message_later(event, message))
       return
    
    args = event.message.text.split()
    if len(args) != 2:
        message = await event.respond("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_delete @username")
        asyncio.create_task(delete_message_later(event, message))
        return
    
    username = args[1]
    user = await client.get_entity(username)
    cursor.execute('DELETE FROM birthdays WHERE user_id = ? AND chat_id = ?', (user.id, event.chat_id))
    conn.commit()
    message = await event.respond(f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {user.first_name} —É–¥–∞–ª—ë–Ω.")
    asyncio.create_task(delete_message_later(event, message))

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏–∏
async def birthday_reminder():
    while True:
        now = datetime.now()

        if now.hour == 6 and now.minute == 30:
            today = now.strftime("%d %B").lower()
            cursor.execute('SELECT chat_id, username FROM birthdays WHERE date_of_birth = ?', (today,))
            users = cursor.fetchall()

            for chat_id, username in users:
                await client.send_message(chat_id, f"–°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É @{username}! \n –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ")

        await asyncio.sleep(60)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    asyncio.create_task(birthday_reminder())
    await client.start()
    await client.run_until_disconnected()

if __name__ == '__main__':
    asyncio.get_event_loop().run_until_complete(main())